/*----- PROTECTED REGION ID(ArmenMotors.h) ENABLED START -----*/
//=============================================================================
//
// file :        ArmenMotors.h
//
// description : Include file for the ArmenMotors class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ArmenMotors_H
#define ArmenMotors_H

#include <tango.h>

#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>


#define PORT_BAUDRATE B9600


/*----- PROTECTED REGION END -----*/	//	ArmenMotors.h

/**
 *  ArmenMotors class description:
 *    
 */

namespace ArmenMotors_ns
{
/*----- PROTECTED REGION ID(ArmenMotors::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	ArmenMotors::Additional Class Declarations

class ArmenMotors : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(ArmenMotors::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	ArmenMotors::Data Members

//	Device property data members
public:
	//	number_of_motor:	
	Tango::DevUShort	number_of_motor;
	//	speed_of_motor:	speed in Hz
	Tango::DevULong	speed_of_motor;
	//	address:	
	Tango::DevUShort	address;
	//	rs232port:	
	string	rs232port;

	int comPort = 0;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ArmenMotors(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ArmenMotors(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	ArmenMotors(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~ArmenMotors() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : ArmenMotors::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : ArmenMotors::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command PowerOn related method
	 *	Description: This command power on/off motor
	 *
	 *	@param argin false
	 *	@returns 
	 */
	virtual Tango::DevBoolean power_on(Tango::DevBoolean argin);
	virtual bool is_PowerOn_allowed(const CORBA::Any &any);
	/**
	 *	Command MotionLeft related method
	 *	Description: 
	 *
	 */
	virtual void motion_left();
	virtual bool is_MotionLeft_allowed(const CORBA::Any &any);
	/**
	 *	Command MotionRight related method
	 *	Description: 
	 *
	 */
	virtual void motion_right();
	virtual bool is_MotionRight_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: 
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : ArmenMotors::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(ArmenMotors::Additional Method prototypes) ENABLED START -----*/

	bool openComPort();
	void closeComPort();
	void sendCommand(char *,char *);


/*----- PROTECTED REGION END -----*/	//	ArmenMotors::Additional Method prototypes
};

/*----- PROTECTED REGION ID(ArmenMotors::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	ArmenMotors::Additional Classes Definitions

}	//	End of namespace

#endif   //	ArmenMotors_H
